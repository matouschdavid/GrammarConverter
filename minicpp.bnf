MiniCppP1P1 =  ConstDef | VarDef | FuncDecl | FuncDef | ';' 
MiniCppP1 = MiniCppP1 MiniCppP1P1 | eps
MiniCpp = MiniCppP1 
 ConstDefP1P1 =  ',' ident Init 
 ConstDefP1 =  ConstDefP1  ConstDefP1P1 | eps
 ConstDef = 'const' Type ident Init  ConstDefP1 ';' 
 InitP1P1 =  '+' | '-' | eps
 InitP1 =  false | true | 'nullptr' |  InitP1P1 number 
 Init = '='  InitP1 
 VarDefP1 =  '*' | eps
 VarDefP2 =  Init | eps
 VarDefP3P1P1 =  '*' | eps
 VarDefP3P1P2 =  Init | eps
 VarDefP3P1 =  ','  VarDefP3P1P1 ident  VarDefP3P1P2 
 VarDefP3 =  VarDefP3  VarDefP3P1 | eps
 VarDef = Type  VarDefP1 ident  VarDefP2  VarDefP3 ';' 
 FuncDecl = FuncHead ';' 
 FuncDef = FuncHead Block 
 FuncHeadP1 =  '*' | eps
 FuncHeadP2 =  FormParList | eps
 FuncHead = Type  FuncHeadP1 ident '('  FuncHeadP2 ')' 
 FormParListP1P1 =  '*' | eps
 FormParListP1P2 =  '[' ']' | eps
 FormParListP1P3P1P1 =  '*' | eps
 FormParListP1P3P1P2 =  '[' ']' | eps
 FormParListP1P3P1 =  ',' Type  FormParListP1P3P1P1 ident  FormParListP1P3P1P2 
 FormParListP1P3 =  FormParListP1P3  FormParListP1P3P1 | eps
 FormParListP1 =  'void'  | Type  FormParListP1P1 ident  FormParListP1P2  FormParListP1P3 
 FormParList =  FormParListP1 
 Type = 'void' | 'bool' | 'int' 
 BlockP1P1 =  ConstDef | VarDef | Stat 
 BlockP1 =  BlockP1  BlockP1P1 | eps
 Block = '{'  BlockP1 '}' 
 StatP1 =  EmptyStat | BlockStat | ExprStat | IfStat | WhileStat | BreakStat | InputStat | OutputStat | DeleteStat | ReturnStat 
 Stat =  StatP1 
 EmptyStat = ';' 
 BlockStat = Block .  ExprStat
 IfStatP1 =  'else' Stat | eps
 IfStat = 'if' '(' Expr ')' Stat  IfStatP1 
 WhileStat = 'while' '(' Expr ')' Stat 
 BreakStat = 'break' ';' 
 InputStat = 'cin' '>>' ident ';' 
 OutputStatP1 =  Expr | string | 'endl' 
 OutputStatP2P1P1 =  Expr | string | 'endl' 
 OutputStatP2P1 =  '<<'  OutputStatP2P1P1 
 OutputStatP2 =  OutputStatP2  OutputStatP2P1 | eps
 OutputStat = 'cout' '<<'  OutputStatP1   OutputStatP2 ';' 
 DeleteStat = 'delete' '[' ']' ident ';' 
 ReturnStatP1 =  Expr | eps
 ReturnStat = 'return'  ReturnStatP1 ';' 
 ExprP1P1P1 =  '=' | '+=' | '-=' | '*=' | '/=' | '%=' 
 ExprP1P1 =   ExprP1P1P1 OrExpr 
 ExprP1 =  ExprP1  ExprP1P1 | eps
 Expr = OrExpr  ExprP1 
 OrExprP1P1 =  '||' AndExpr 
 OrExprP1 =  OrExprP1  OrExprP1P1 | eps
 OrExpr = AndExpr  OrExprP1 
 AndExprP1P1 =  '&&' RelExpr 
 AndExprP1 =  AndExprP1  AndExprP1P1 | eps
 AndExpr = RelExpr  AndExprP1 
 RelExprP1P1P1 =  '==' | '!=' | '<' | '<=' | '>' | '>=' 
 RelExprP1P1 =   RelExprP1P1P1 SimpleExpr 
 RelExprP1 =  RelExprP1  RelExprP1P1 | eps
 RelExpr = SimpleExpr  RelExprP1 
 SimpleExprP1 =  '+' | '-' | eps
 SimpleExprP2P1P1 =  '+' | '-' 
 SimpleExprP2P1 =   SimpleExprP2P1P1 Term 
 SimpleExprP2 =  SimpleExprP2  SimpleExprP2P1 | eps
 SimpleExpr =  SimpleExprP1  Term  SimpleExprP2 
 TermP1P1P1 =  '*' | '/' | '%' 
 TermP1P1 =   TermP1P1P1 NotFact 
 TermP1 =  TermP1  TermP1P1 | eps
 Term = NotFact  TermP1 
 NotFactP1 =  '!' | eps
 NotFact =  NotFactP1 Fact 
 FactP1P1 =  '++' | '--' | eps
 FactP1P2P1 =  '[' Expr ']' 
 FactP1P2P2P1 =  ActParList | eps
 FactP1P2P2 =  '('  FactP1P2P2P1 ')' 
 FactP1P2 =   FactP1P2P1  |  FactP1P2P2 | eps
 FactP1P3 =  '++' | '--' | eps
 FactP1 =  'false' | 'true' | 'nullptr' | number  |  FactP1P1  ident  FactP1P2   FactP1P3  | 'new' Type '[' Expr ']' | '(' Expr ')'  
 Fact =  FactP1 
 ActParListP1P1 =  ',' Expr 
 ActParListP1 =  ActParListP1  ActParListP1P1 | eps
 ActParList = Expr  ActParListP1 