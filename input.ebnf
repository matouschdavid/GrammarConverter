MiniCpp = { ConstDef | VarDef | FuncDecl | FuncDef | ';' } .
ConstDef = 'const' Type ident Init { ',' ident Init } ';' .
Init = '=' ( false | true | 'nullptr'
| [ '+' | '-' ] number ) .
VarDef = Type [ '*' ] ident [ Init ]
{ ',' [ '*' ] ident [ Init ] } ';' .
FuncDecl = FuncHead ';' .
FuncDef = FuncHead Block .
FuncHead = Type [ '*' ] ident '(' [ FormParList ] ')' .
FormParList = ( 'void' 
| Type [ '*' ] ident [ '[' ']' ]
{ ',' Type [ '*' ] ident [ '[' ']' ] }
) .
Type = 'void' | 'bool' | 'int' .
Block = '{' { ConstDef | VarDef | Stat } '}' .
Stat = ( EmptyStat | BlockStat | ExprStat
| IfStat | WhileStat | BreakStat
| InputStat | OutputStat
| DeleteStat | ReturnStat
) .
EmptyStat = ';' .
BlockStat = Block . 
ExprStat = Expr ';' .
IfStat = 'if' '(' Expr ')' Stat [ 'else' Stat ] .
WhileStat = 'while' '(' Expr ')' Stat .
BreakStat = 'break' ';' .
InputStat = 'cin' '>>' ident ';' .
OutputStat = 'cout' '<<' ( Expr | string | 'endl' ) 
{ '<<' ( Expr | string | 'endl' ) } ';' .
DeleteStat = 'delete' '[' ']' ident ';' .
ReturnStat = 'return' [ Expr ] ';' .
Expr = OrExpr { ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' ) OrExpr } .
OrExpr = AndExpr { '||' AndExpr } .
AndExpr = RelExpr { '&&' RelExpr } .
RelExpr = SimpleExpr
{ ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) SimpleExpr } .
SimpleExpr = [ '+' | '-' ] 
Term { ( '+' | '-' ) Term } .
Term = NotFact { ( '*' | '/' | '%' ) NotFact } .
NotFact = [ '!' ] Fact .
Fact = ( 'false' | 'true' | 'nullptr' | number 
| [ '++' | '--' ] 
ident [ ( '[' Expr ']' ) 
| ( '(' [ ActParList ] ')' ) 
] 
[ '++' | '--' ] 
| 'new' Type '[' Expr ']'
| '(' Expr ')' 
) .
ActParList = Expr { ',' Expr } .